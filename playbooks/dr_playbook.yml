---
###############################################################################
# Disaster-Recovery workflow – WITH PER-TAG CSV REPORTS
###############################################################################

###############################################################################
# PLAY 1 – PROTECT  (primary)  ➜  create DB + file backups
###############################################################################
- name: Stage 1 – Protect (Primary site)
  hosts: primary
  become: true

  vars:
    db_name:  myapp
    db_user:  postgres
    db_password: "pass@123"            # <- vault in production!
    backup_root: /var/backups/dr
    app_data_path: /var/www/myapp
    control_node_fetch_dir: "/tmp/ansible_dr_fetched_backups"

    # ── reporting helpers ────────────────────────────────────────────────
    _dr_report: {}                                         # tag → [rows]
    _csv_time: "{{ ansible_date_time.iso8601_basic }}"     # yyyymmddThhmmssZ

  tasks:
  # ---------------------------------------------------------------------
  # Backup directory
  # ---------------------------------------------------------------------
  - block:
      - name: Ensure backup directory exists on primary
        ansible.builtin.file:
          path: "{{ backup_root }}"
          state: directory
          mode: "0750"
        register: task_res
        tags: [backup, files]

      - name: Record task result
        ansible.builtin.set_fact:
          _dr_report: >-
            {{
              _dr_report | combine(
                { item: (_dr_report.get(item, []) + [ {
                    'task'   : 'Ensure backup directory exists on primary',
                    'host'   : inventory_hostname,
                    'rc'     : task_res.rc         | default(0),
                    'changed': task_res.changed    | default(false),
                    'failed' : task_res.failed     | default(false),
                    'msg'    : task_res.msg        | default('')
                } ]) }, recursive=True)
            }}
        loop: ['backup','files']
        loop_control: {label: "{{ item }}"}
        tags: [always]

  # ---------------------------------------------------------------------
  # DB dump
  # ---------------------------------------------------------------------
  - block:
      - name: Dump and compress PostgreSQL database
        ansible.builtin.shell: >
          pg_dump -U {{ db_user }} {{ db_name }} |
          gzip -9 -c > {{ backup_root }}/{{ db_name }}_$(date +%Y%m%d%H%M%S).sql.gz
        environment:
          PGPASSWORD: "{{ db_password }}"
        changed_when: true
        register: task_res
        tags: [backup, database]

      - name: Record task result
        ansible.builtin.set_fact:
          _dr_report: >-
            {{
              _dr_report | combine(
                { item: (_dr_report.get(item, []) + [ {
                    'task'   : 'Dump and compress PostgreSQL database',
                    'host'   : inventory_hostname,
                    'rc'     : task_res.rc         | default(0),
                    'changed': task_res.changed    | default(false),
                    'failed' : task_res.failed     | default(false),
                    'msg'    : task_res.msg        | default('')
                } ]) }, recursive=True)
            }}
        loop: ['backup','database']
        loop_control: {label: "{{ item }}"}
        tags: [always]

  # ---------------------------------------------------------------------
  # Tarball of app data
  # ---------------------------------------------------------------------
  - block:
      - name: Create tarball of application data
        ansible.builtin.shell: >
          tar --create --gzip --file {{ backup_root }}/data_$(date +%Y%m%d%H%M%S).tgz -C {{ app_data_path }} .
        changed_when: true
        register: task_res
        tags: [backup, files]

      - name: Record task result
        ansible.builtin.set_fact:
          _dr_report: >-
            {{
              _dr_report | combine(
                { item: (_dr_report.get(item, []) + [ {
                    'task'   : 'Create tarball of application data',
                    'host'   : inventory_hostname,
                    'rc'     : task_res.rc         | default(0),
                    'changed': task_res.changed    | default(false),
                    'failed' : task_res.failed     | default(false),
                    'msg'    : task_res.msg        | default('')
                } ]) }, recursive=True)
            }}
        loop: ['backup','files']
        loop_control: {label: "{{ item }}"}
        tags: [always]

  # ---------------------------------------------------------------------
  # Pause (settle)
  # ---------------------------------------------------------------------
  - block:
      - name: Wait 15 seconds for artifacts to settle on disk
        ansible.builtin.pause:
          seconds: 15
        register: task_res
        tags: [misc]

      - name: Record task result
        ansible.builtin.set_fact:
          _dr_report: >-
            {{
              _dr_report | combine(
                { 'misc': (_dr_report.get('misc', []) + [ {
                    'task'   : 'Pause 15 seconds',
                    'host'   : inventory_hostname,
                    'rc'     : task_res.rc         | default(0),
                    'changed': task_res.changed    | default(false),
                    'failed' : task_res.failed     | default(false),
                    'msg'    : ''
                } ]) }, recursive=True)
            }}
        tags: [always]

  # ---------------------------------------------------------------------
  # Find DB dumps
  # ---------------------------------------------------------------------
  - block:
      - name: Find all DB dump files
        ansible.builtin.find:
          paths: "{{ backup_root }}"
          patterns: "{{ db_name }}_*.sql.gz"
          file_type: file
        register: task_res
        tags: [backup, database]

      - name: Record task result
        ansible.builtin.set_fact:
          _dr_report: >-
            {{
              _dr_report | combine(
                { item: (_dr_report.get(item, []) + [ {
                    'task'   : 'Find DB dump files',
                    'host'   : inventory_hostname,
                    'rc'     : task_res.rc         | default(0),
                    'changed': task_res.changed    | default(false),
                    'failed' : task_res.failed     | default(false),
                    'msg'    : 'matched=' ~ task_res.matched
                } ]) }, recursive=True)
            }}
        loop: ['backup','database']
        loop_control: {label: "{{ item }}"}
        tags: [always]

  # ---------------------------------------------------------------------
  # Find data archives
  # ---------------------------------------------------------------------
  - block:
      - name: Find all data archive files
        ansible.builtin.find:
          paths: "{{ backup_root }}"
          patterns: "data_*.tgz"
          file_type: file
        register: task_res
        tags: [backup, files]

      - name: Record task result
        ansible.builtin.set_fact:
          _dr_report: >-
            {{
              _dr_report | combine(
                { item: (_dr_report.get(item, []) + [ {
                    'task'   : 'Find data archive files',
                    'host'   : inventory_hostname,
                    'rc'     : task_res.rc         | default(0),
                    'changed': task_res.changed    | default(false),
                    'failed' : task_res.failed     | default(false),
                    'msg'    : 'matched=' ~ task_res.matched
                } ]) }, recursive=True)
            }}
        loop: ['backup','files']
        loop_control: {label: "{{ item }}"}
        tags: [always]

  # ---------------------------------------------------------------------
  # DEBUG discovered artifacts
  # ---------------------------------------------------------------------
  - block:
      - name: DEBUG – show discovered artifact paths
        ansible.builtin.debug:
          msg:
            - "DB dumps:   {{ task_res_db.files   | map(attribute='path') | list | default([]) }}"
            - "Data tgz:   {{ task_res_data.files | map(attribute='path') | list | default([]) }}"
        register: task_res
        vars:
          task_res_db: "{{ hostvars[inventory_hostname]['task_res'] }}"
          task_res_data: "{{ hostvars[inventory_hostname]['task_res'] }}"
        tags: [misc]

      - name: Record task result
        ansible.builtin.set_fact:
          _dr_report: >-
            {{
              _dr_report | combine(
                { 'misc': (_dr_report.get('misc', []) + [ {
                    'task'   : 'DEBUG discovered artifacts',
                    'host'   : inventory_hostname,
                    'rc'     : 0,
                    'changed': false,
                    'failed' : false,
                    'msg'    : 'debug output written'
                } ]) }, recursive=True)
            }}
        tags: [always]

  # ---------------------------------------------------------------------
  # Assertions
  # ---------------------------------------------------------------------
  - block:
      - name: Fail if latest DB dump was not found
        ansible.builtin.assert:
          that:
            - task_res_db.matched > 0
        register: task_res
        tags: [backup, database]

      - name: Record task result
        ansible.builtin.set_fact:
          _dr_report: >-
            {{
              _dr_report | combine(
                { item: (_dr_report.get(item, []) + [ {
                    'task'   : 'Assert latest DB dump exists',
                    'host'   : inventory_hostname,
                    'rc'     : task_res.rc | default(0),
                    'changed': task_res.changed | default(false),
                    'failed' : task_res.failed | default(false),
                    'msg'    : task_res.msg | default('')
                } ]) }, recursive=True)
            }}
        loop: ['backup','database']
        loop_control: {label: "{{ item }}"}
        tags: [always]

  - block:
      - name: Fail if latest data archive was not found
        ansible.builtin.assert:
          that:
            - task_res_data.matched > 0
        register: task_res
        tags: [backup, files]

      - name: Record task result
        ansible.builtin.set_fact:
          _dr_report: >-
            {{
              _dr_report | combine(
                { item: (_dr_report.get(item, []) + [ {
                    'task'   : 'Assert latest data archive exists',
                    'host'   : inventory_hostname,
                    'rc'     : task_res.rc | default(0),
                    'changed': task_res.changed | default(false),
                    'failed' : task_res.failed | default(false),
                    'msg'    : task_res.msg | default('')
                } ]) }, recursive=True)
            }}
        loop: ['backup','files']
        loop_control: {label: "{{ item }}"}
        tags: [always]

  # ---------------------------------------------------------------------
  # Set-fact: primary_backup_package
  # ---------------------------------------------------------------------
  - block:
      - name: Register artifacts for fetch (primary paths)
        ansible.builtin.set_fact:
          primary_backup_package:
            - "{{ (task_res_db.files   | sort(attribute='mtime', reverse=true) | first).path }}"
            - "{{ (task_res_data.files | sort(attribute='mtime', reverse=true) | first).path }}"
        register: task_res
        tags: [backup]

      - name: Record task result
        ansible.builtin.set_fact:
          _dr_report: >-
            {{
              _dr_report | combine(
                { 'backup': (_dr_report.get('backup', []) + [ {
                    'task'   : 'Register primary_backup_package',
                    'host'   : inventory_hostname,
                    'rc'     : 0,
                    'changed': task_res.changed | default(false),
                    'failed' : false,
                    'msg'    : 'package registered'
                } ]) }, recursive=True)
            }}
        tags: [always]

  # ---------------------------------------------------------------------
  # Fetch artifacts
  # ---------------------------------------------------------------------
  - block:
      - name: Fetch backup artifacts from primary to control node
        ansible.builtin.fetch:
          src: "{{ item }}"
          dest: "{{ control_node_fetch_dir }}"
          flat: true
        loop: "{{ primary_backup_package }}"
        register: task_res
        tags: [backup]

      - name: Record task result
        ansible.builtin.set_fact:
          _dr_report: >-
            {{
              _dr_report | combine(
                { 'backup': (_dr_report.get('backup', []) + [ {
                    'task'   : 'Fetch backup artifacts',
                    'host'   : inventory_hostname,
                    'rc'     : task_res.rc | default(0),
                    'changed': task_res.changed | default(false),
                    'failed' : task_res.failed | default(false),
                    'msg'    : 'files fetched=' ~ (task_res.results | length)
                } ]) }, recursive=True)
            }}
        tags: [always]

  # ---------------------------------------------------------------------
  # Set-fact: control_node_backup_package
  # ---------------------------------------------------------------------
  - block:
      - name: Register fetched artifact paths on control node
        ansible.builtin.set_fact:
          control_node_backup_package: "{{ task_res.results | map(attribute='dest') | list }}"
        register: task_res
        tags: [backup]

      - name: Record task result
        ansible.builtin.set_fact:
          _dr_report: >-
            {{
              _dr_report | combine(
                { 'backup': (_dr_report.get('backup', []) + [ {
                    'task'   : 'Register control_node_backup_package',
                    'host'   : inventory_hostname,
                    'rc'     : 0,
                    'changed': task_res.changed | default(false),
                    'failed' : false,
                    'msg'    : 'package registered'
                } ]) }, recursive=True)
            }}
        tags: [always]

  # ---------------------------------------------------------------------
  # DEBUG: show control_node_backup_package
  # ---------------------------------------------------------------------
  - block:
      - name: DEBUG – control_node_backup_package
        ansible.builtin.debug:
          var: control_node_backup_package
        register: task_res
        tags: [misc]

      - name: Record task result
        ansible.builtin.set_fact:
          _dr_report: >-
            {{
              _dr_report | combine(
                { 'misc': (_dr_report.get('misc', []) + [ {
                    'task'   : 'DEBUG control_node_backup_package',
                    'host'   : inventory_hostname,
                    'rc'     : 0,
                    'changed': false,
                    'failed' : false,
                    'msg'    : 'debug printed'
                } ]) }, recursive=True)
            }}
        tags: [always]

  # ───────────────────────────────────────────────────────────────────────────
  # GENERATE CSVs  (one per tag) – runs ONCE on control node
  # ───────────────────────────────────────────────────────────────────────────
  - name: Generate CSV reports for Protect stage
    delegate_to: localhost
    run_once: true
    vars:
      report_items: "{{ _dr_report | dict2items }}"
    loop: "{{ report_items }}"
    loop_control: {label: "{{ item.key }}"}
    ansible.builtin.copy:
      dest: "/tmp/protect_{{ item.key }}_report_{{ _csv_time }}.csv"
      mode: "0644"
      content: |
        Task,Host,ReturnCode,Changed,Failed,Message
        {% for r in item.value %}
        "{{ r.task }}",{{ r.host }},{{ r.rc }},{{ r.changed }},{{ r.failed }},{{ r.msg | replace('\n',' ') }}
        {% endfor %}
    tags: [always]

###############################################################################
# PLAY 2 – TRANSFER  (control ➜ DR host)  ➜  copy artifacts off-site
###############################################################################
- name: Stage 2 – Transfer (Control Node → DR)
  hosts: dr
  become: true

  vars:
    dr_incoming: /srv/dr_incoming

    # reporting helpers
    _dr_report: {}
    _csv_time: "{{ ansible_date_time.iso8601_basic }}"

  tasks:
  # ---------------------------------------------------------------------
  # Incoming dir
  # ---------------------------------------------------------------------
  - block:
      - name: Ensure incoming directory exists on DR host
        ansible.builtin.file:
          path: "{{ dr_incoming }}"
          state: directory
          mode: "0750"
        register: task_res
        tags: [transfer]

      - name: Record task result
        ansible.builtin.set_fact:
          _dr_report: >-
            {{
              _dr_report | combine(
                { 'transfer': (_dr_report.get('transfer', []) + [ {
                    'task'   : 'Ensure dr_incoming exists',
                    'host'   : inventory_hostname,
                    'rc'     : task_res.rc | default(0),
                    'changed': task_res.changed | default(false),
                    'failed' : task_res.failed | default(false),
                    'msg'    : task_res.msg | default('')
                } ]) }, recursive=True)
            }}
        tags: [always]

  # ---------------------------------------------------------------------
  # Copy artifacts
  # ---------------------------------------------------------------------
  - block:
      - name: Copy backup artifacts from control node to DR host
        ansible.builtin.copy:
          src: "{{ item }}"
          dest: "{{ dr_incoming }}/"
          mode: preserve
        loop: "{{ hostvars[groups['primary'][0]].control_node_backup_package }}"
        register: task_res
        tags: [transfer]

      - name: Record task result
        ansible.builtin.set_fact:
          _dr_report: >-
            {{
              _dr_report | combine(
                { 'transfer': (_dr_report.get('transfer', []) + [ {
                    'task'   : 'Copy artifacts to DR',
                    'host'   : inventory_hostname,
                    'rc'     : task_res.rc | default(0),
                    'changed': task_res.changed | default(false),
                    'failed' : task_res.failed | default(false),
                    'msg'    : 'files copied=' ~ (task_res.results | length)
                } ]) }, recursive=True)
            }}
        tags: [always]

  # ───────────────────────────────────────────────────────────────────────────
  # CSVs for Transfer stage
  # ───────────────────────────────────────────────────────────────────────────
  - name: Generate CSV reports for Transfer stage
    delegate_to: localhost
    run_once: true
    vars:
      report_items: "{{ _dr_report | dict2items }}"
    loop: "{{ report_items }}"
    loop_control: {label: "{{ item.key }}"}
    ansible.builtin.copy:
      dest: "/tmp/transfer_{{ item.key }}_report_{{ _csv_time }}.csv"
      mode: "0644"
      content: |
        Task,Host,ReturnCode,Changed,Failed,Message
        {% for r in item.value %}
        "{{ r.task }}",{{ r.host }},{{ r.rc }},{{ r.changed }},{{ r.failed }},{{ r.msg | replace('\n',' ') }}
        {% endfor %}
    tags: [always]

###############################################################################
# PLAY 3 – RECOVER  (DR site)  ➜  restore when dr_action=failover
###############################################################################
- name: Stage 3 – Recover (DR site – only when dr_action=failover)
  hosts: dr
  become: true

  vars:
    incoming_dir: /srv/dr_incoming
    restore_root: /srv/dr_restore
    db_name:  myapp
    db_user:  postgres
    db_password: "pass@123"

    _dr_report: {}
    _csv_time: "{{ ansible_date_time.iso8601_basic }}"

  tasks:
  # ---------------------------------------------------------------------
  # Skip unless failover
  # ---------------------------------------------------------------------
  - block:
      - name: End play unless failover requested
        ansible.builtin.meta: end_play
        when: (dr_action | default('standby')) != 'failover'
        register: task_res
        tags: [restore]

      - name: Record task result
        ansible.builtin.set_fact:
          _dr_report: >-
            {{
              _dr_report | combine(
                { 'restore': (_dr_report.get('restore', []) + [ {
                    'task'   : 'Check dr_action',
                    'host'   : inventory_hostname,
                    'rc'     : 0,
                    'changed': false,
                    'failed' : false,
                    'msg'    : 'No failover requested'
                } ]) }, recursive=True)
            }}
        when: (dr_action | default('standby')) != 'failover'
        tags: [always]

  # ---------------------------------------------------------------------
  # Create restore directory
  # ---------------------------------------------------------------------
  - block:
      - name: Create restore directory
        ansible.builtin.file:
          path: "{{ restore_root }}"
          state: directory
          mode: "0750"
        register: task_res
        tags: [restore, files]

      - name: Record task result
        ansible.builtin.set_fact:
          _dr_report: >-
            {{
              _dr_report | combine(
                { item: (_dr_report.get(item, []) + [ {
                    'task'   : 'Create restore directory',
                    'host'   : inventory_hostname,
                    'rc'     : task_res.rc | default(0),
                    'changed': task_res.changed | default(false),
                    'failed' : task_res.failed | default(false),
                    'msg'    : task_res.msg | default('')
                } ]) }, recursive=True)
            }}
        loop: ['restore','files']
        loop_control: {label: "{{ item }}"}
        tags: [always]

  # ---------------------------------------------------------------------
  # Find data tgz
  # ---------------------------------------------------------------------
  - block:
      - name: Find all data archive files on DR
        ansible.builtin.find:
          paths: "{{ incoming_dir }}"
          patterns: "data_*.tgz"
          file_type: file
        register: task_res
        tags: [restore, files]

      - name: Record task result
        ansible.builtin.set_fact:
          _dr_report: >-
            {{
              _dr_report | combine(
                { item: (_dr_report.get(item, []) + [ {
                    'task'   : 'Find data archive files (DR)',
                    'host'   : inventory_hostname,
                    'rc'     : task_res.rc | default(0),
                    'changed': task_res.changed | default(false),
                    'failed' : task_res.failed | default(false),
                    'msg'    : 'matched=' ~ task_res.matched
                } ]) }, recursive=True)
            }}
        loop: ['restore','files']
        loop_control: {label: "{{ item }}"}
        tags: [always]

  # ---------------------------------------------------------------------
  # Extract latest data tgz
  # ---------------------------------------------------------------------
  - block:
      - name: Extract latest data archive
        ansible.builtin.unarchive:
          src: "{{ (task_res.files | sort(attribute='mtime', reverse=true) | first).path }}"
          dest: "{{ restore_root }}"
          remote_src: true
        when: task_res.matched > 0
        register: task_res_extract
        tags: [restore, files]

      - name: Record task result
        ansible.builtin.set_fact:
          _dr_report: >-
            {{
              _dr_report | combine(
                { item: (_dr_report.get(item, []) + [ {
                    'task'   : 'Extract latest data archive',
                    'host'   : inventory_hostname,
                    'rc'     : task_res_extract.rc | default(0),
                    'changed': task_res_extract.changed | default(false),
                    'failed' : task_res_extract.failed | default(false),
                    'msg'    : task_res_extract.msg | default('')
                } ]) }, recursive=True)
            }}
        loop: ['restore','files']
        loop_control: {label: "{{ item }}"}
        when: task_res.matched > 0
        tags: [always]

  # ---------------------------------------------------------------------
  # Find DB dumps on DR
  # ---------------------------------------------------------------------
  - block:
      - name: Find all DB dump files on DR
        ansible.builtin.find:
          paths: "{{ incoming_dir }}"
          patterns: "{{ db_name }}_*.sql.gz"
          file_type: file
        register: task_res
        tags: [restore, database]

      - name: Record task result
        ansible.builtin.set_fact:
          _dr_report: >-
            {{
              _dr_report | combine(
                { item: (_dr_report.get(item, []) + [ {
                    'task'   : 'Find DB dumps (DR)',
                    'host'   : inventory_hostname,
                    'rc'     : task_res.rc | default(0),
                    'changed': task_res.changed | default(false),
                    'failed' : task_res.failed | default(false),
                    'msg'    : 'matched=' ~ task_res.matched
                } ]) }, recursive=True)
            }}
        loop: ['restore','database']
        loop_control: {label: "{{ item }}"}
        tags: [always]

  # ---------------------------------------------------------------------
  # Restore DB
  # ---------------------------------------------------------------------
  - block:
      - name: Restore PostgreSQL dump
        ansible.builtin.shell: >
          bash -c 'gunzip -c "{{ (task_res.files | sort(attribute="mtime", reverse=true) | first).path }}" |
                   psql -U {{ db_user }} {{ db_name }}'
        environment:
          PGPASSWORD: "{{ db_password }}"
        when: task_res.matched > 0
        changed_when: true
        register: task_res_restore
        tags: [restore, database]

      - name: Record task result
        ansible.builtin.set_fact:
          _dr_report: >-
            {{
              _dr_report | combine(
                { item: (_dr_report.get(item, []) + [ {
                    'task'   : 'Restore PostgreSQL dump',
                    'host'   : inventory_hostname,
                    'rc'     : task_res_restore.rc | default(0),
                    'changed': task_res_restore.changed | default(false),
                    'failed' : task_res_restore.failed | default(false),
                    'msg'    : task_res_restore.msg | default('')
                } ]) }, recursive=True)
            }}
        loop: ['restore','database']
        loop_control: {label: "{{ item }}"}
        when: task_res.matched > 0
        tags: [always]

  # ---------------------------------------------------------------------
  # Start application service
  # ---------------------------------------------------------------------
  - block:
      - name: Start application service
        ansible.builtin.systemd:
          name: myapp
          state: started
          enabled: true
        register: task_res
        tags: [restore, services]

      - name: Record task result
        ansible.builtin.set_fact:
          _dr_report: >-
            {{
              _dr_report | combine(
                { item: (_dr_report.get(item, []) + [ {
                    'task'   : 'Start application service',
                    'host'   : inventory_hostname,
                    'rc'     : task_res.rc | default(0),
                    'changed': task_res.changed | default(false),
                    'failed' : task_res.failed | default(false),
                    'msg'    : task_res.msg | default('')
                } ]) }, recursive=True)
            }}
        loop: ['restore','services']
        loop_control: {label: "{{ item }}"}
        tags: [always]

  # ───────────────────────────────────────────────────────────────────────────
  # CSVs for Recover stage
  # ───────────────────────────────────────────────────────────────────────────
  - name: Generate CSV reports for Recover stage
    delegate_to: localhost
    run_once: true
    vars:
      report_items: "{{ _dr_report | dict2items }}"
    loop: "{{ report_items }}"
    loop_control: {label: "{{ item.key }}"}
    ansible.builtin.copy:
      dest: "/tmp/recover_{{ item.key }}_report_{{ _csv_time }}.csv"
      mode: "0644"
      content: |
        Task,Host,ReturnCode,Changed,Failed,Message
        {% for r in item.value %}
        "{{ r.task }}",{{ r.host }},{{ r.rc }},{{ r.changed }},{{ r.failed }},{{ r.msg | replace('\n',' ') }}
        {% endfor %}
    tags: [always]
